'''
Implement Greedy search algorithm for any of the following application:
● Selection Sort
● Minimum Spanning Tree
● Single-Source Shortest Path Problem
● Job Scheduling Problem
● Prim&#39;s Minimal Spanning Tree Algorithm
● Kruskal&#39;s Minimal Spanning Tree Algorithm
● Dijkstra&#39;s Minimal Spanning Tree Algorithm
'''

def swap(arr, i, j):
    arr[i], arr[j] = arr[j], arr[i]

def selection_sort(arr, n):
    for i in range(n):
        min_index = i  # Start with the first element in the unsorted part
        for j in range(i + 1, n):
            # Find the index of the minimum element
            if arr[j] < arr[min_index]:
                min_index = j
        # Swap the found minimum element with the first element of the unsorted part
        swap(arr, i, min_index)
    return arr

# Get user input for the array
n = int(input("Enter the size of the array: "))
arr = []

print(f"Enter {n} elements:")
for _ in range(n):
    element = int(input())  # Take input for each element
    arr.append(element)  # Add the element to the array

# Perform selection sort
selection_sort(arr, n)

# Print the sorted array
print("Sorted array:", arr)
