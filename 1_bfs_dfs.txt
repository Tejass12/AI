'''
Implement depth first search algorithm and Breadth First Search algorithm. Use an
undirected graph and develop a recursive algorithm for searching all the vertices of a
graph or tree data structure.
'''

#include <iostream>
#include <stdlib.h>
using namespace std;
int cost[10][10], i, j, k, n, qu[10], front, rear, v, visit[10], visited[10];
int stk[10], top, visit1[10], visited1[10];
int main(){
    int m;
    cout << "Enter number of vertices : ";
        cin >> n;
        cout << "Enter number of edges : ";
        cin >> m;    
    
    cout << "\nCONNECTED EDGES :\n";
        for (k = 1; k <= m; k++)
        {
            cin >> i >> j;
            cost[i][j] = 1;
            cost[j][i] = 1;
        }
    int flag=1;
    do{
    int op;
    cout<< "Which operation do you want to perfrom on the graph:-\n1)BFS\n2)DFS";
    cin>>op;
    if(op==1)
    {
    cout << "Enter initial vertex : ";
        cin >> v;
        cout << "The bfs of the graph is\n";
        cout << v<<endl;
        visited[v] = 1;
        k = 1;
        while (k < n)
        {
            for (j = 1; j <= n; j++)
            if (cost[v][j] != 0 && visited[j] != 1 && visit[j] != 1)
            {
                       visit[j] = 1;
                       qu[rear++] = j;
            }
            v = qu[front++];
            cout << v << " ";
            k++;
            visit[v] = 0;
            visited[v] = 1;
        }
        char o;
        cout<<"Do you wish to continue?(y/N)";
        cin>>o;
        
        }
        else
        {
        cout <<endl<<"Enter initial vertex : ";
        cin >> v;
        cout << "The dfs of the graph is\n";
        cout << v<<endl;
        visited[v] = 1;
        k = 1;
        while (k < n)
        {
            for (j = n; j >= 1; j--)
                if (cost[v][j] != 0 && visited1[j] != 1 && visit1[j] != 1)
                {
                    visit1[j] = 1;
                    stk[top] = j;
                    top++;
                }
            v = stk[--top];
            cout << v << " ";
            k++;
            visit1[v] = 0;
            visited1[v] = 1;
        }
    }
    char o;
        cout<<"Do you wish to continue?(y/N)";
        cin>>o;
        if (o=='Y')
        {
        flag=1;
        }
        else
        {
        flag=0;
        }
        }while(flag=1);
return 0;
}
