'''
Implement A star (A*) Algorithm for any game search problem.
'''

import heapq

def heuristic(a, b):
    """A simple heuristic that returns 0, since we are dealing with non-spatial nodes."""
    return 0  # No heuristic used for simple graphs

def a_star(graph, start, goal):
    """A* pathfinding algorithm."""
    open_set = []
    heapq.heappush(open_set, (0, start))  # (cost, node)
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
    f_score = {node: float('inf') for node in graph}
    f_score[start] = heuristic(start, goal)

    while open_set:
        current = heapq.heappop(open_set)[1]

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)  # Add start node to the path
            return path[::-1]  # Return reversed path

        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost

            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)

                if neighbor not in [i[1] for i in open_set]:
                    heapq.heappush(open_set, (f_score[neighbor], neighbor))

    return []  # No path found

def main():
    """Main function to take user input and execute A*."""
    graph = {}
    num_edges = int(input("Enter the number of edges in the graph: "))
    
    print("Enter edges in the format: start_node end_node cost")
    for _ in range(num_edges):
        start_node, end_node, cost = input().strip().split()
        cost = int(cost)
        
        if start_node not in graph:
            graph[start_node] = {}
        if end_node not in graph:
            graph[end_node] = {}
        
        graph[start_node][end_node] = cost
        graph[end_node][start_node] = cost  # For undirected graph

    start = input("Enter the start node: ")
    goal = input("Enter the goal node: ")

    path = a_star(graph, start, goal)

    if path:
        print("Path found:", path)
    else:
        print("No path found.")

if __name__ == '__main__':
    main()
